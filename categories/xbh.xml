<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Soldering Fumes (xbh)</title><link>http://jhnphm.github.io/</link><description></description><atom:link href="http://jhnphm.github.io/categories/xbh.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Fri, 28 Feb 2014 14:05:10 GMT</lastBuildDate><generator>Nikola &lt;http://getnikola.com/&gt;</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Thesis: Porting XBH</title><link>http://jhnphm.github.io/posts/porting-xbh.html</link><description>&lt;div&gt;&lt;p&gt;As mentioned in a previous &lt;a class="reference external" href="http://jhnphm.wordpress.com/2013/04/18/thesis/"&gt;post&lt;/a&gt;, the goal of my thesis is to extend the XBX
project to cover power and energy measurements. In order to do this, the
eXternal Benchmarking Harness (XBH) needs to be replaced with something that can
provide frequent sampling and sufficient storage in order to measure current and
voltage in order to compute power and energy usage, and record mins and maxes.&lt;/p&gt;
&lt;p&gt;The original XBH was based off of a home automation platform using an &lt;a class="reference external" href="http://www.atmel.com/devices/ATMEGA644.aspx"&gt;ATMega644&lt;/a&gt; ,
which was deemed insufficiently powerful. We originally intended on replacing it
with a Raspberry Pi, but unfortunately it was deemed rather unsuitable for real-time
measurement purposes despite its power, as only Linux variants are supported,
bare-metal programming is difficult, and external ADCs would have to be added.
We decided to relegate the Pi to simply a networking interface for the &lt;a class="reference external" href="http://jhnphm.github.io/posts/www.ti.com/ww/en/launchpad/launchpads-tivac.html"&gt;Tiva-C&lt;/a&gt;
board from TI, which can easily run bare-metal code and has a builtin ADC.&lt;/p&gt;
&lt;p&gt;The Tiva-C half of the XBH will be responsible for triggering the start of the
measurement via a GPIO pin, measuring voltage and current while operating, and
sensing completion of the benchmark via  GPIO pin. It will record data and
attach a timestamp and send  the data over USB to the Raspberry Pi.
Pre-processing data to reduce what has to be uploaded over USB may be done on
the Tiva-C&lt;/p&gt;
&lt;p&gt;The Raspberry Pi will be responsible for receiving commands via SSH or a web
interface and telling the ARM when to start. It is also responsible for
downloading code to and programming the eXternal Benchmarking Device (XBD).&lt;/p&gt;
&lt;p&gt;Currently the task is to get USB IO between a PC and the stellaris working.&lt;/p&gt;&lt;/div&gt;</description><category>thesis</category><category>xbh</category><category>xbx</category><guid>http://jhnphm.github.io/posts/porting-xbh.html</guid><pubDate>Wed, 26 Feb 2014 22:54:12 GMT</pubDate></item><item><title>Thesis: Tiva-C Toolchain</title><link>http://jhnphm.github.io/posts/tivac-toolchain.html</link><description>&lt;div&gt;&lt;p&gt;So I've not been working consistently on my thesis as I should. As
previously mentioned on my old &lt;a class="reference external" href="http://jhnphm.wordpress.com/"&gt;blog&lt;/a&gt;, I was considering running
everything directly off the Raspberry Pi and using Xenomai as the
real-time OS in order to keep the jitter low.&lt;/p&gt;
&lt;p&gt;After some discussions with my professor, we decided that it would
drastically simplify things if the realtime measurement part was
assigned to a microcontroller, which also has ADCs which the Pi doesn't
have. This essentially relegates the Pi to being a NIC and a data
storage device. There are ethernet interfaces for microcontrollers,
however they tend to cost almost as much as the Pi itself.&lt;/p&gt;
&lt;p&gt;We are looking at using the &lt;a class="reference external" href="http://jhnphm.github.io/posts/www.ti.com/ww/en/launchpad/launchpads-tivac.html"&gt;Tiva-C&lt;/a&gt; series microcontroller from Texas
Instruments which has the ability to do 2 megasamples per second, and
runs at 80MHz, for the low cost of 12$. What we actually have on hand is
the LM4F120XL which is essentially the same thing before the series was
rebranded, but without PWM and USB OTG.&lt;/p&gt;
&lt;p&gt;The ADCs on the microcontroller require buffering due to the rather low
2.5kOhm impedence. This will be addressed later. In the meantime, we
intend to use the i2c ADCs already on hand.&lt;/p&gt;
&lt;p&gt;In order to build the toolchain, I downloaded the latest version of
&lt;a class="reference external" href="http://crosstool-ng.org/"&gt;crosstool-ng&lt;/a&gt; and built it from source, using a &lt;a class="reference external" href="http://e2e.ti.com/support/microcontrollers/tiva_arm/f/908/t/65137.aspx"&gt;post&lt;/a&gt; by Todd Elliot
on the TI forums as a guide. However, it doesn't seem necessary to
install OpenOCD from source on Ubuntu 13.10 for the LM4F120XL, and the
sample config recommended isn't optimal for the microcontroller (doesn't
use the hardware floating point). I've posted my configuration on
&lt;a class="reference external" href="https://github.com/jhnphm/tiva-c_xtools"&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One also needs to download &lt;a class="reference external" href="https://focus-webapps.ti.com/licreg/docs/swlicexportcontrol.tsp?form_type=2&amp;amp;prod_no=SW-EK-LM4F232-2.0.1.11577.exe&amp;amp;ref_url=http://software-dl.ti.com/tiva-c/SW-TM4C/latest/&amp;amp;form_id=154910"&gt;TivaWare&lt;/a&gt; from Texas Instruments. Once
downloaded it can be unzipped on Linux without running the windows
executable. Run &lt;tt class="docutils literal"&gt;make clean&lt;/tt&gt; on the extracted directory,
&lt;tt class="docutils literal"&gt;patch &lt;span class="pre"&gt;-Np1&lt;/span&gt; &amp;lt; hard_fp.patch&lt;/tt&gt;, then run &lt;tt class="docutils literal"&gt;make&lt;/tt&gt;. The patch can be
found in my repository above. My configuration enables the hard float
ABI while TivaWare is set to default to soft float.&lt;/p&gt;
&lt;p&gt;To start the on-chip-debugger to program the board, ensure that the
permissions to /dev/ttyAC* are correct. then run
&lt;tt class="docutils literal"&gt;openocd &lt;span class="pre"&gt;-f&lt;/span&gt; &lt;span class="pre"&gt;/usr/share/openocd/scripts/board/ek-lm4f120xl.cfg&lt;/span&gt;&lt;/tt&gt; for the
LM4F120XL, or
&lt;tt class="docutils literal"&gt;openocd &lt;span class="pre"&gt;-f&lt;/span&gt; &lt;span class="pre"&gt;/usr/share/openocd/scripts/board/ek-tm4c123gxl.cfg&lt;/span&gt;&lt;/tt&gt; for
the TivaC. &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ek-tm4c123gxl.cfg&lt;/span&gt;&lt;/tt&gt; will have to be obtained from
&lt;a class="reference external" href="https://gitorious.org/openocd/openocd/commit/24099b4c144f1c6d1244b8b4d98c0fd69c9ff2fc"&gt;gitorious&lt;/a&gt; and placed in &lt;tt class="docutils literal"&gt;/usr/share/openocd/scripts/board&lt;/tt&gt;. The
above assumes OpenOCD was installed from a package manager.&lt;/p&gt;
&lt;p&gt;As an example, to program, run
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;arm-stellaris-eabi-gdb&lt;/span&gt; &lt;span class="pre"&gt;tivaware/examples/boards/ek-tm4c123gxl/qs-rgb/gcc/qs-rgb.axf&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Below is an example session:&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
GNU gdb (crosstool-NG 1.19.0) 7.6-2013.05
Copyright (C) 2013 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "--host=x86_64-build_unknown-linux-gnu
--target=arm-stellaris-eabi".
For bug reporting instructions, please see:
&amp;lt;http://bugs.launchpad.net/gdb-linaro/&amp;gt;...
Reading symbols from
/home/john/Downloads/tivaware/examples/boards/ek-tm4c123gxl/qs-rgb/gcc/qs-rgb.axf...done.
(gdb) target remote :3333
Remote debugging using :3333
0x000002d4 in ButtonsPoll ()
(gdb) monitor reset halt
target state: halted
target halted due to debug-request, current mode: Thread
xPSR: 0x01000000 pc: 0x00000ba4 msp: 0x20000910
(gdb) load

Loading section .text, size 0x2664 lma 0x0
Loading section .data, size 0x50 lma 0x2664
Start address 0xba4, load size 9908
Transfer rate: 12 KB/sec, 4954 bytes/write.
(gdb)
(gdb) monitor reset init
target state: halted
target halted due to debug-request, current mode: Thread
xPSR: 0x01000000 pc: 0x00000ba4 msp: 0x20000910
(gdb) c
&lt;/pre&gt;&lt;/div&gt;</description><category>thesis</category><category>tiva-c</category><category>arm</category><category>xtools</category><category>xbh</category><guid>http://jhnphm.github.io/posts/tivac-toolchain.html</guid><pubDate>Sat, 08 Feb 2014 15:32:54 GMT</pubDate></item></channel></rss>